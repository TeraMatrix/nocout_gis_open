#!/usr/bin/python
"""
Link Ethernet Poller script.

This is part of device application. 
Poller script determines the all links ethernet status. 
poller script takes the snmp value of OID .1.3.6.1.2.1.2.2.1.8 from snmp agent of device at specific interval.
all links status are sent to device application 

"""


def link_state_value(st):
    """
	utility function for mapping the interget OID value to string status.
    """
    names = {'1': 'up', '2': 'down'}
    return names.get(st)

# ####################################################################################
# Function : check_rici_link_ethernet_status
#
#Parameters: info (SNMP output ) _no_params ( No Parameters)
#
#Output: plugin output ,service state,performance data
#####################################################################################


def check_rici_link_ethernet_status(item, _no_params, info):
    """
                check_rici_link_ethernet_status function calculates the link ethernet status of the link 

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : [Management_Port_on_Odu]up [Radio_Interface]up

                        performance_data  (list):
                                        performance data
                                        Example: Management_Port_on_Odu=up;;;; Radio_Interface=up;;;;
                        Raises:
                                ValueError ,Exception
    """
    state = 3
    link_state = None
    link_string = "fe_"
    link_state_list = []
    infotext = "unknown_value"
    try:
	if info:
		infotext = ""
		for index in range(0,len(info[0])):
                	link_state = info[0][index]
			if link_state:
                		link_state = link_state_value(str(link_state))
                		if link_state == None:
                    			link_state = "unknown_link_state"
                		link_state_list.append((link_string+"%s" % (index+1), link_state))
                		state = 0
                		if int(info[0][index]) == 2:
                        		state =2
        	for index, link_state in link_state_list:
                	infotext += "[link %s] %s" % (index, link_state)

    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,link_state_list)


check_info["rici_link_ethernet_status"] = {
    'check_function': check_rici_link_ethernet_status,
    'service_description': 'rici_link_ethernet_status',
    'has_perfdata': True,
}

#####################################################################
#snmp OID corrosponding to links ethernet status.
######################################################################

snmp_info["rici_link_ethernet_status"] = ( ".1.3.6.1.2.1.2.2.1.8", ["21","22","23","24","25","26","27","28"] )
