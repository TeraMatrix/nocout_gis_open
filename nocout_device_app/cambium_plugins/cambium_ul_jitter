#!/usr/bin/python

import binascii

"""
Poller script which runs on ss and calculates the ul jitter from connected BS type.

Poller script determines the received signal strength indication.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
RSSI information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_ul_jitter
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################

params = (6, 10)

def check_cambium_ul_jitter(item, _no_params, info):
    """
        Check_cambium_ul_jitter function calcaulates the received signal strength indication

        Args:
            item (str) Specific item on SNMP output on which we want to filter results

        Kwargs:
            params (tuple) Check parameters for critical and warning state of service

        Returns:
            state (int) :
                    0: OK
                    1: Warning
                    2: Critical
                    3: unknown
            infotext(string):
                    plugin output
                    Example : Device received signal strength indication is -76

            performance_data  (list):
                    performance data
                    Example: cambium_ul_jitter=-76;-50;-80;;;
            Raises:
                ValueError ,Exception
    """
    warn, crit = params
    state = 3
    infotext = "unknown_value"
    jitter_ul = None

    try:
        if info:
	    for entry in info:
                a=binascii.b2a_hex(entry[0])
                n = 2
                entry[0]=(':').join([a[i:i+2] for i in range(0, len(a), n)])
		if item in entry:
			jitter_ul = entry[1]
                	if jitter_ul > crit:
                        	state = 2
               	 	elif jitter_ul <= crit and jitter_ul >= warn:
                        	state = 1
                	else:
                        	state = 0
			break
            infotext = "Device received signal strength indication is %s " % jitter_ul
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext, [("ul_jitter", saveint(jitter_ul),warn,crit)])


check_info["cambium_ul_jitter"] = {
    'check_function': check_cambium_ul_jitter,
    'service_description': 'cambium_ul_jitter',
    'has_perfdata': True,
}

#######################################################################
#	SNMP OID
#######################################################################
snmp_info["cambium_ul_jitter"] = ( ".1.3.6.1.4.1.161.19.3.1.4.1", ["3","22"] )
