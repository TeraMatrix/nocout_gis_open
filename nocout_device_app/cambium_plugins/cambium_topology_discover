#!/usr/bin/python
import binascii
"""
IDU serial number Poller script.

This is part of device application. 
Poller script determines the mac information of connected SS  with ap. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.3 from snmp agent of device at specific interval.
IDU serial number of IDU is sent to device application 

"""
# ######################################################################
# Function : check_cambium_topology_discover
#
# Parameters: info (SNMP Output) _no_params(No Parameters)
#
# Output: service state and plugin output
# #####################################################################

def check_cambium_topology_discover(item, params, info):
    """
                check_cambium_topology_discover function calculates the mac information of connected ss with ap

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - BB1202020

                        Raises:
                               Exception
    """
    state = 3
    infotext = "unknown"
    try:
        if info:
	    infotext = ""
	    for i in range(len(info)):
		
		if i == 0:
			ap_ip = info[i][1]
			ap_mac = info[i][0]
			a=binascii.b2a_hex(ap_mac)
			n= 2
                	ap_mac=(':').join([a[j:j+2] for j in range(0, len(a), n)])
			ap_color_code = int(info[i][2])
			infotext += "%s %s:%s " %(ap_mac,ap_ip,ap_color_code)
		else:
			connected_ss_mac = info[i][3]
			connected_ss_ip = info[i][4]
			a=binascii.b2a_hex(connected_ss_mac)
                	n = 2
                	connected_ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
                	infotext += "%s/%s " % (connected_ss_ip,connected_ss_mac)
			
        	state = 0
    except:
        infotext = "unknow"
    return (state, infotext)


check_info["cambium_topology_discover"] = {
    'check_function': check_cambium_topology_discover,
    'service_description': 'cambium_topology_discover',
}

#################################################################
#SNMP OID value for poller script
################################################################

snmp_info["cambium_topology_discover"] = ( ".1.3.6.1", ["2.1.2.2.1.6.1","4.1.161.19.3.3.1.13.0", "4.1.161.19.3.3.2.2.0", "4.1.161.19.3.1.4.1.3", "4.1.161.19.3.1.4.1.69"] )
