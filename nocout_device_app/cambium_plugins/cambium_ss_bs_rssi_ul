#!/usr/bin/python

"""
Poller script which runs on ss and calculates the ul rssi from connected BS type.

Poller script determines the received signal strength indication.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
RSSI information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_ss_bs_rssi_ul
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################

params = (-50, -85)


def check_cambium_ss_bs_rssi_ul(item, params, info):
    """
        Check_cambium_ss_bs_rssi_ul function calcaulates the received signal strength indication

        Args:
            item (str) Specific item on SNMP output on which we want to filter results

        Kwargs:
            params (tuple) Check parameters for critical and warning state of service

        Returns:
            state (int) :
                    0: OK
                    1: Warning
                    2: Critical
                    3: unknown
            infotext(string):
                    plugin output
                    Example : Device received signal strength indication is -76

            performance_data  (list):
                    performance data
                    Example: cambium_ss_bs_rssi_ul=-76;-50;-80;;;
            Raises:
                ValueError ,Exception
    """
    warn, crit = params
    state = 3
    infotext = "unknown_value"
    rssi = None

    try:
        if info:
	    for entry in info:
		if item in entry:
			rssi = int(entry[1])
			break
            if rssi < crit:
                state = 2
            elif rssi > crit and rssi < warn:
                state = 1
            else:
                state = 0
            infotext = "Device received signal strength indication is %s " % rssi
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext, [("rssi_ul", rssi, warn, crit)])


check_info["cambium_ss_bs_rssi_ul"] = {
    'check_function': check_cambium_ss_bs_rssi_ul,
    'service_description': 'cambium_ss_bs_rssi_ul',
    'has_perfdata': True,
}

#######################################################################
#	SNMP OID
#######################################################################
snmp_info["cambium_ss_bs_rssi_ul"] = ( ".1.3.6.1.4.1.161.19.3.1.4.1", ["3","21"] )
