#!/usr/bin/python
import binascii
import sys
from telnetlib import Telnet
import socket
import json
import os
import mysql.connector
"""
service on SS,which calculates the ss mac.

This is part of device application. 
Poller script determines the ss ip. 
poller script takes the snmp value of OID  1.3.6.1.4.1.161.19.3.3.1.13.0 from snmp agent of device at specific interval.
SS mac information is sent to device application 

"""
# ######################################################################
# Function : check_cambium_ss_mac_invent
#
# Parameters: info (SNMP Output) _no_params(No Parameters)
#
# Output: service state and plugin output
# #####################################################################

def live_query_reg_count(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        exit_value = 3
        plugin_message = ''
        reg_count_state = "UNKNOWN"
        reg_count = None
        host_name = extract_host_from_cambium_topology(mac)
        try:
                if host_name[0][0]:
                        query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("cambium_topology_discover",host_name[0][0])
			site = host_name[0][1]
                        machine_name = host_name[0][1].split('_')[0]
                        socket_ip = _LIVESTATUS[machine_name]['host']
                        socket_port = _LIVESTATUS[machine_name][site]['port']

                        query_output = json.loads(get_from_socket(socket_ip,int(socket_port),query_string,site,machine_name).strip())
                        if query_output[0][0]:
                                plugin_output = str(query_output[0][0].split('- ')[1])
                                plugin_output = [mac for mac in plugin_output.split(' ')]
                                ss_params = filter(lambda x: '/' in x,plugin_output)
                                ss_matched_params = filter(lambda x: mac in x,ss_params)
                                reg_count= map(lambda x: x.split('/')[4],ss_matched_params)
				if ((reg_count != 'None') and (reg_count != None)):
                                	reg_count= int(reg_count[0])
        except:
		reg_count= None	
	return reg_count	



def check_cambium_reg_count(item, params, info):
    """
                check_cambium_ss_mac_invent function calculates the mac of ss

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - BB1202020

                        Raises:
                               Exception
    """
    state = 3
    reg_count = None
    infotext = "unknown_value"
    warn,crit = params
    try:
        if info:
            if info[0][0]:
                ss_mac = info[0][0]
		a=binascii.b2a_hex(ss_mac)
                n = 2
                ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
		if ss_mac:
			reg_count = live_query_reg_count(ss_mac )
			if isinstance(reg_count,int):
				if reg_count > crit:
					state  = 2
				elif reg_count <= crit and reg_count >= warn:
					state = 1
				else:
					state = 0
	infotext = "Device reg_count is %s " % reg_count
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext, [("reg_count", reg_count, warn, crit)])


check_info["cambium_reg_count"] = {
    'check_function': check_cambium_reg_count,
    'service_description': 'cambium_reg_count',
    'has_perfdata': True,
}

#################################################################
#SNMP OID value for poller script
################################################################

snmp_info["cambium_reg_count"] = ( ".1.3.6.1.2.1.2.2.1", ["6.1"] )
