#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import re
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_fetch_params
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################



def extract_bs_ip_from_wimax_topology(ss_host_mac):
        query = """
        select ip_address from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
        db = mysql_conn()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()

        return data




def connection_telnet_for_params(host_name, port):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	params_dict = {}
        try:
                tn = Telnet(host_name,port,timeout=3)
        except socket.timeout:
		return params_dict
        tn.read_until("Login:")
        tn.write("admin" + "\r\n")
        tn.read_until("Password:")
        tn.write("admin" + "\r\n")
	tn.write("show ss measurement\r\n")
        tn.write("show service-flows\r\n")
        tn.write("show service-class\r\n")
	tn.write("show ss uptime\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()

	svc_cls_index_list = []
	params_value =[]
        temp_mac_index_map = {}
 	flag = 0
	data = data.split("\n")
	try:
		match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
		params_dict,data = extract_ul_dl_thoughput(params_dict,data)
		if data:
			params_dict,data= extract_svc_cls_index(params_dict,data)
	        	params_dict=extract_session_uptime(params_dict,data)
	except:
		params_dict = {}
	return params_dict
		
def extract_session_uptime(params_dict,data):
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	for i,row in enumerate(data):
		if match_string in row:
			params_list = [r for r in row.split()]
			mac = str(params_list[1])
			year =  int(params_list[2])
			day = int(params_list[4])
			hour = int(params_list[6])
			minutes = int(params_list[8])
			seconds = int(params_list[11])	
			uptime = ((year*365*24*60) + (day*24*60) + (hour*60) + minutes) * 60 + seconds 
			params_dict[mac].append(uptime)
	return params_dict
	
def  extract_ul_dl_thoughput(params_dict,data):
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	params_dict = {}
	for i, row in enumerate(data):
		if match_string in row:
			params_list = [r for r in entry.split()]
			dl_throughput = float(params_list[10])
			ul_throughput = float(params_list[6])

			mac_address = str(params_list[2])
			if mac_address in params_dict.keys():
				params_dict[mac_address].append(dl_throughput)
				params_dict[mac_address].append(ul_throughput)
			else:
				params_dict[mac_address] = [] 

			if "show service-flows" in row:
				break
	if len(data) >= 3:
		data = data[i+1:]
	else:
		data = None
	return params_dict,data


def  extract_svc_cls_index(params_dict,data):
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	for i, row in enumerate(data):
		if match_string in row and ("UPSTREAM" in row or "DOWNSTREAM" in row):
			params_list = [r for r in row.split()]
			mac_for_svc_cls = str(params_list[0])
			svc_cls_index = int(params_list[4])
			if mac_for_svc_cls in temp_mac_index_map.keys():
				temp_mac_index_map[mac_for_svc_cls].append(svc_cls_index)
			else:
				temp_mac_index_map[mac_for_svc_cls] = []
		if "show service-class" in row:
			break
	params_dict = extract_svc_class(data[i+1:],temp_mac_index_map,params_dict)
	return params_dict,data[i+1:]

def extract_svc_class(data,temp_mac_index_map,params_dict):
	svc_cls_map_index= {}
	svc_cls_index_list=[]
	qos_result = {}
	for entry in temp_mac_index_map.keys():
		svc_cls_index_list=svc_cls_index_list+temp_mac_index_map.get(entry)

	cls_index_set  = set(svc_cls_index_list)
	result = list(cls_index_set)	
	for item in result:
		pattern = item + "[\w+ _]*"
		s=re.match(pattern,data)
		row = s.group(0) 
		params_list = [r for r in row.split()]
		qos = int(params_list[-1])
		if item in svc_cls_map_index.keys():
			svc_cls_map_index[item] =qos
	for entry in temp_mac_index_map.keys():
		ul_qos =svc_cls_map_index.get(temp_mac_index_map.get(entry)[0])
		dl_qos =svc_cls_map_index.get(temp_mac_index_map.get(entry)[1])
		params_dict[entry].append(ul_qos) 
		params_dict[entry].append(dl_qos) 
	return params_dict

def check_wimax_fetch_params(item, _no_params, info):
    """
            check_wimax_fetch_params function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    try:
	if info:
		if info[0][0]:
			bs_ip = info[0][0]
                	params_dict =connection_telnet_for_params(host_ip[0][0], 23)
			if params_dict:
        			for entry in params_dict.keys():
					try:
						ul_utilization = params_dict.get(entry)[0]
					except:
						ul_utilization = ""
					try:
						dl_utilization = params_dict.get(entry)[1]
					except:
						dl_utilization = ""
					try:
						ul_qos = params_dict.get(entry)[2]
					except:
						ul_qos = ""
					try:
						dl_qos = params_dict.get(entry)[3]
					except:
						dl_qos = ""
					try:
						uptime = params_dict.get(entry)[4]
					except:
						uptime = ""
					infotext += entry.lower() +"=" + ul_utilization +","+ dl_utilization + "," + ul_qos +"," +\
						+ dl_qos +","+ uptime			
				state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext)


check_info["wimax_fetch_params"] = {
    'check_function': check_wimax_fetch_params,
    'service_description': 'wimax_fetch_params',
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_fetch_params"] = ( ".1.3.6.1.4.1.5812.2000.4.1.1", ["1.0"] )
