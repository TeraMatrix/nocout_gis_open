#!/usr/bin/python
# ######################################################################
# Function: check_rad5k_bs_frequency_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################
def check_rad5k_bs_frequency_invent(item, _no_params, info):
   	"""
            check_rad5k_bs_frequency_invent function calculates the uplink utilization

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                                    3: unknown
                    infotext(string):
                                    plugin output
                                    Example :  OK - frequency 5870.000 

                    Raises:
                            ValueError ,Exception
  	"""

	state = 3
	infotext = "unknown_value"
	frequency = ""
	try:
		if info:
		    if info[0][0]:
			frequency = int(info[0][0])
			frequency = "%.3f"%frequency
			state = 0
			infotext = "frequency %s" %frequency		
	except ValueError :
		infotext = "type_mismatch_value"
	except:
		infotext = "unknown_value"
	return(state,infotext,[("frequency",frequency)])

check_info["rad5k_bs_frequency_invent"] = {
	'check_function' : check_rad5k_bs_frequency_invent,
	'service_description' : "rad5k_bs_frequency_invent",
	'has_perfdata' : True
}
#########################################################################
#       SNMP OID for the Frequency
#########################################################################
snmp_info["rad5k_bs_frequency_invent"] = (".1.3.6.1.4.1.4458.1000.1.5",["16.0"]) 

