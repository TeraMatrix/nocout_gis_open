#!/usr/bin/python
# ######################################################################
# Function: check_rad5k_bs_mac_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################
def check_rad5k_bs_mac_invent(item, _no_params, info):
	
    """
            check_rad5k_bs_mac_invent function calculates the uplink utilization

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                                    3: unknown
                    infotext(string):
                                    plugin output
                                    Example :  OK - mac: 00:15:67:65:16:5e 

                    Raises:
                            ValueError ,Exception

    """ 
    state = 3
    infotext = "unknown_value"
    mac = ""      
    try:
        if info:
            if info[0][0]:
		mac = info[0][0]
		mac = (':').join(mac[i:i+2] for i in range(0, len(mac), 2))
		state = 0
                infotext = "mac: %s" % mac                                
    except ValueError :
	infotext = "type_mismatch_value"
    except:
	infotext = "unknown_value"
	
    return (state,infotext,[("bs_mac",mac)])
                
check_info["rad5k_bs_mac_invent"] = {
    'check_function' :  check_rad5k_bs_mac_invent,
    'service_description' : "rad5k_bs_mac_invent",
    'has_perfdata': True
}
#########################################################################
#       SNMP OID for the HBS MAC
#########################################################################
snmp_info['rad5k_bs_mac_invent'] = (".1.3.6.1.4.1.4458.1000.1.3.2.1",["5.0"])
