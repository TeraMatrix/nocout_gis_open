#!/usr/bin/python
import re
import time
from operator import itemgetter
"""
uplink utilizationPoller script.

This is part of device application. 
Poller script determines the port current uplink utilization in terms of number of octets in downlink direction.
poller script takes the snmp value of OID .1.3.6.1.2.1.2.2.1.16 from snmp agent of device at specific interval.
Total Downlink utilization is sent to device application 

"""
# #######################################################################
# Function : check_switch_ul_utilization
#
# Parameters: info (SNMP otuput ,_no_params (NO parameters))
#
# Output: service state,plugin output and performance data
# #######################################################################


def cisco_check_switch_ul_utilization(item, _no_params, info):
    """
                check_switch_ul_utilization function calculates the downlink utilization

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - [Management_Port_on_Odu] ul_utilization:2994339289

                        performance_data  (list):
                                        performance data
                                        Example: Management_Port_on_Odu=2994339289;;;; Radio_Interface=;;;;
                        Raises:
                                ValueError ,Exception
    """
    state = 3
    rate = None
    link_out_octets = None
    wrapped = False
    infotext = "unknown_value"
    status_list = []
    port_string = "fa0_"
    port_string2 ="gi0_"
    total_port = 26
    index1 = 0
    
    try:
	if info:
		infotext = "ul_utilization:["
		this_time = int(time.time())
		infotext += "time=%s " % this_time
        	for index in range(len(info[0])):
                	if 'Gi'  in info[0][index][0] or 'Fa' in info[0][index][0]:
				if info[1][index][0]== '1':
					link_up = info[1][index]
					if link_up:
						#link_out_octets = int(info[1][index])
						link_out_octets = (info[2][index])
						link_out_octets = int(link_out_octets[0])
						this_time = int(time.time())
						try:
							if index < total_port-2 :
                                                		port_string1 = port_string+str(index1+1)
                                                		timedif, rate = get_counter("switch_ul_utilization_%s" % (port_string1), 
								this_time, saveint(link_out_octets))
								rate = (rate * 8)/(1024.0 * 1024)
    								state = 0
                                                	else:
                                                        	port_string1 = port_string2+str(index1+1-(total_port-2))
                                                        	#print port_string2
                                                        	timedif, rate = get_counter("switch_ul_utilization_%s" % (port_string1),
                                                        	this_time, saveint(link_out_octets))
                                                        	rate = (rate * 8)/(1024.0 * 1024)
                                                        	state = 0
						except MKCounterWrapped:
							wrapped=True
                				status_list.append((port_string1,"%.2f" % rate))
                				infotext += "%s=%s " % (port_string1,link_out_octets)
                                index1 = index1+1
                key1 = str(g_hostname)+"switch_ul_utilization"
                memc.set(key1,status_list)
		infotext += "]"
    except ValueError:
        infotext = "type_mismatch_error"
    except:
	infotext = "unknown_value"
    if wrapped:
        infotext = "Counter wrapped"
    return (state, infotext, status_list)


check_info["cisco_switch_ul_utilization"] = {
    'check_function': cisco_check_switch_ul_utilization,
    'service_description': 'cisco_switch_ul_utilization',
    'has_perfdata': True,
}

##############################################################################
#SNMP OID for the Downlink utilization
##############################################################################


snmp_info["cisco_switch_ul_utilization"] = [( ".1.3.6.1.2.1.2.2.1",["2"]),( ".1.3.6.1.2.1.2.2.1",["8"]),
				   ( ".1.3.6.1.2.1.2.2.1", ["10"] )]
