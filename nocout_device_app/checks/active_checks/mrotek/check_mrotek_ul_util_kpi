#!/usr/bin/python
import time
import sys
import os
import socket
"""
Poller script which runs on ss and calculates the ul utilization of the ss connected from BS.

Poller script determines the uplink utilization of the ss.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
uplink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_mrotek_pmp1_ul_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################



def extract_mrotek_ul_util_from_live(hostname,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	mro_ul = None
	query = "GET services\nColumns: service_perf_data\n" + \
		"Filter: service_description = mrotek_ul_utilization\n" + \
		"Filter: host_name = %s\nOutputFormat: python\n" % (hostname)
	try:
        	s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
		socket_path = "/omd/sites/%s/tmp/run/live" % site
        	s.connect(socket_path)
		s.send(query)
       		s.shutdown(socket.SHUT_WR)
        	query_output = s.recv(100000000)
        	query_output.strip("\n")
		query_output = eval(query_output)
        	if query_output[0][0]:
			try:
				mro_ul = query_output[0][0].split(' ')[0].split('=')[1].split(';',1)[0]
			except:
				mro_ul = None
	except Exception ,e:
		mro_ul=None

        return mro_ul


def live_query_mrotek_ul_util_kpi(hostname,site,war,crit,qos):
    state = 3
    ul_kpi = ''
    perf = ''
    plugin_message = ''
    state_string = "unknown"
    qos_value= qos.split('|')[:-1]
    try:
	ul_util= extract_mrotek_ul_util_from_live(hostname,site)
	if ul_util:
		ul_kpi = (float(ul_util)/float(qos_value[0])) *100
	if ul_kpi:
		if ul_kpi < war:
			state = 0
			state_string = "ok"
		elif ul_kpi >= crit:
			state = 2
			state_string = "critical"
		else:
			state = 1
			state_string = "warning"
		ul_kpi = "%.2f" % ul_kpi		
	perf += 'fe_1' + "=%s;%s;%s;%s " % (ul_kpi,war,crit,qos_value[0])
    except Exception ,e:
	perf = '' 
    plugin_message += "mrotek_ul_util_kpi %s - %s|%s" % (state_string,ul_kpi,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))
		
def  main():

    state_string = "unknown"
    ul_util=''
    plugin_message=''
    try:
        host_name = sys.argv[1]
        site = sys.argv[2]
        war = sys.argv[3]
        crit = sys.argv[4]
	qos = sys.argv[5]
    except:
        perf =';;; ' 
        plugin_message += "mrotek_ul_util_kpi %s - %s|%s" % (state_string,ul_util,perf)
        sys.exit((3))

    live_query_mrotek_ul_util_kpi(host_name,site,float(war),float(crit),qos)
	

if __name__ == '__main__':
	main() 
