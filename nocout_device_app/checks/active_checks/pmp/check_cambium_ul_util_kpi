#!/usr/bin/python
import time
import binascii
import sys
import os
import socket
"""
Poller script which runs on ss and calculates the downlink utilization for the ss from the connected BS

Poller script determines the downlink utilization for the connected ss from BS
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
downlink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################


def extract_cam_ul_util_from_live(hostname,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	cam_ul = ''
        query_string = "GET services\nColumns: service_perf_data\nFilter: host_name = %s\n" % (hostname) +\
                       "Filter: service_description = cambium_ul_utilization\n"+\
		       "OutputFormat: python\n"

        try:
                s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
                socket_path = "/omd/sites/%s/tmp/run/live" % site
                s.connect(socket_path)
		s.settimeout(60.0)
                s.send(query_string)
                s.shutdown(socket.SHUT_WR)
		try:
                	query_output = eval(s.recv(100000000))
		except socket.timeout ,e:
			err=e.args[0]
			if err == 'timed out':
				cam_ul=''
                if query_output[0][0]:
                        cam_ul = query_output[0][0].split('=')[1].split(';')[0]
        except:
		cam_ul=''

        return cam_ul



def live_query_cam_ul_util_kpi(host_name,site,war,crit):
    perf = ''
    cam_ul = ''
    state = 3
    plugin_message = ''
    state_string = "unknown"
    try:
	#p = os.path.dirname(os.path.abspath(__file__))
	#print p
        #paths = [path for path in p.split('/')]
        #site = paths[paths.index('sites') + 1]
	#print host_name,site
	cam_ul =extract_cam_ul_util_from_live(host_name,site)
	if cam_ul:
		cam_ul = (float(cam_ul)/2.24 ) * 100
		cam_ul = round(cam_ul,2)
		if cam_ul < war:
                	state = 0
			state_string = "ok"
		elif cam_ul >= crit:
			state = 2
			state_string = "critical"
		else:
			state = 1
			state_string = "warning"
	perf += 'cam_ul_util_kpi' + "=%s;%s;%s " %(cam_ul,war,crit)
   
    except:
        perf = ';%s;%s' % (war,crit)
    plugin_message += "cambium_ul_util_kpi %s - %s|%s" % (state_string,cam_ul,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))


def  main():
    state_string = "unknown"
    cam_ul=''
    try:
    	host_name = sys.argv[1]
    	site = sys.argv[2]
    	war = sys.argv[3]
    	crit = sys.argv[4]
    except:
	perf =''
    	plugin_message += "cambium_ul_util_kpi %s - %s|%s" % (state_string,cam_ul,perf)
	sys.exit((3))	
    live_query_cam_ul_util_kpi(host_name,site,float(war),float(crit))


if __name__ == '__main__':
        main()
                 
