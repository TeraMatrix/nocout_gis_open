#!/usr/bin/python
import time
import sys
import os
import socket
import pymongo
from datetime import datetime,timedelta

"""
Poller script which runs on ss and calculates the ul utilization of the ss connected from BS.

Poller script determines the uplink utilization of the ss.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
uplink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_pmp1_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################



try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp

from mysql_connection import memc

def extract_cambium_ss_state(hostname,site):
    state = 3
    ss_state = ''
    perf = ''
    plugin_message = ''
    DB = None
    state_string = "unknown"
    rssi = None
    uas  = None
    machine_name = site.split('_')[0]
    #mongo_port = _LIVESTATUS[machine_name][site]['mongo_port']
    #mongo_host = _LIVESTATUS[machine_name][site]['mongo_host']
    #mongo_db = _LIVESTATUS[machine_name][site]['db']
    #try:
    #	CONN = pymongo.Connection(host=mongo_host, port=int(mongo_port))
    #	db = CONN[mongo_db]
    #except pymongo.errors.PyMongoError, e:
    #	perf = '' 
    #	plugin_message += "cambium_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
    #	sys.stdout.write(plugin_message)
    #	sys.exit((state))

    end_time = datetime.now()
    t_stmp = end_time + timedelta(minutes=-(end_time.minute % 5))
    t_stmp = t_stmp + timedelta(minutes=-5)
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    #start_time = end_time - timedelta(minutes=6)
    #cur = db.device_service_status.find({"local_timestamp" : { "$gt": start_time, "$lt": end_time},"host":hostname,
#	"$or":[{"service":'cambium_ul_rssi'},{"service":"cambium_dl_rssi"},{"service":"cambium_dl_jitter"},{"service":"cambium_ul_jitter"},
#	{"service":"cambium_rereg_count"}]})
    
    if memc:
	key1 = str(hostname) + "_dl_rssi" + "_" + str(int(time.mktime(t_stmp.timetuple()))) 
	key2 = str(hostname) + "_ul_rssi" + "_" + str(int(time.mktime(t_stmp.timetuple()))) 
	key3 = str(hostname) + "_dl_jitter" + "_" + str(int(time.mktime(t_stmp.timetuple())) )
	key4 = str(hostname) + "_ul_jitter" + "_" + str(int(time.mktime(t_stmp.timetuple())) )
	key5 = str(hostname) + "_rereg_count" + "_" + str(int(time.mktime(t_stmp.timetuple())) )
	dl_rssi = memc.get(key1)
	ul_rssi = memc.get(key2)
	dl_jitter = memc.get(key3)
	ul_jitter = memc.get(key4)
	rereg_count = memc.get(key5)
	#print dl_rssi,ul_rssi,dl_jitter,ul_jitter,rereg_count
    try:
        #for doc in cur:
	#	if doc.get('service') == 'cambium_ul_rssi':
	#		ul_rssi=doc.get('data')[0].get('value')
	#	if doc.get('service') == 'cambium_dl_rssi':
	#		dl_rssi=doc.get('data')[0].get('value')
	#	if doc.get('service') == 'cambium_ul_jitter':
	#		ul_jitter=doc.get('data')[0].get('value')
	#	if doc.get('service') == 'cambium_dl_jitter':
	#		dl_jitter=doc.get('data')[0].get('value')
	#	if doc.get('service') == 'cambium_rereg_count':
	#		rereg_count=doc.get('data')[0].get('value')
		
    	if ul_rssi and dl_rssi and (int(ul_rssi) < -82 or int(dl_rssi) < -82):
		ss_state = "los"
    		state = 0
		state_string= "ok"
    	elif dl_jitter and ul_jitter and ( int(ul_jitter) > 7 or int(dl_jitter) > 7):
		ss_state = "jitter"
    		state = 0
		state_string= "ok"
    	elif rereg_count and (int (rereg_count) > 100):
		ss_state = "rereg"
		state = 0
		state_string = "ok"
    	else:
		ss_state = "normal" 
		state_string= "ok"
    		state = 0

    	perf += 'ss_state' + "=%s " % (ss_state)
    except Exception ,e:
	perf = '' 
    plugin_message += "cambium_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))
		
def  main():

    state_string = "unknown"
    ss_state=''
    plugin_message =''
    try:
        host_name = sys.argv[1]
        site = sys.argv[2]
    except:
        perf =''
        plugin_message += "cambium_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
        sys.exit((3))

    extract_cambium_ss_state(host_name,site)
	

if __name__ == '__main__':
	main() 
