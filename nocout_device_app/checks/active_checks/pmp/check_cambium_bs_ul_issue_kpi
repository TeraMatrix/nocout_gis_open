#!/usr/bin/python
import time
import binascii
import sys
import os
import socket
import mysql.connector
"""
Poller script which runs on ss and calculates the downlink utilization for the ss from the connected BS

Poller script determines the downlink utilization for the connected ss from BS
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
downlink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################


try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS, _POLLER_DATABASE
except Exception as exp:
    print exp




def extract_connected_ss_from_topology(hostname):
	data=None
        query = """select connected_device_ip from performance_topology where device_name ='%s' """ %(hostname)
	query1 = """ select M.name, D.ip_address from device_device as D left join machine_machine as M on (D.machine_id = M.id) where D.ip_address in 
	(select connected_device_ip from performance_topology where device_name ='%s')""" %(hostname)
	try:
		db = mysql_conn()
		cur = db.cursor()
		cur.execute(query1)
		data = cur.fetchall()
		cur.close()
	except  Exception,e:
		print e

        return data


def mysql_conn(machine=None):
        db = None
	if machine:
		machine =str(machine)
		user = _POLLER_DATABASE[machine]['user']		
		host = _POLLER_DATABASE[machine]['host']		
		password = _POLLER_DATABASE[machine]['password']		
		database = _POLLER_DATABASE[machine]['database']		
		port = _POLLER_DATABASE[machine]['port']
	else:
		user=_DATABASES['user']
		host=_DATABASES['host']
		password=_DATABASES['password']
		database=_DATABASES['database']
		port=_DATABASES['port']
				
        try:
		db = mysql.connector.connect(
                        user=user,
                        host=host,
                        password=password,
                        database=database,
                        port=port
                        )
        except Exception as exp:
            db=None
        return db




def extract_ss_ul_issue_state_from_live(hostname,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	d = {}
	final_value = []
	ul_issue = None
	try:
		connected_ss_entry = extract_connected_ss_from_topology(hostname)
		for machine, ip in connected_ss_entry:
			d.setdefault(machine, [machine]).append(str(ip))
		mapped_ip = map(tuple, d.values())
		total = 0
		for entry in mapped_ip:
			try:
				db=mysql_conn(machine=entry[0])
				if len(entry[1:]) == 1:
					ip_tuple = "('%s')" % entry[1:][0]
				else:
					ip_tuple = str(entry[1:])
				query = "select current_value from performance_utilizationstatus where "+\
				"service_name='cambium_ss_ul_issue_kpi' and ip_address in " + ip_tuple
				cur = db.cursor()
				cur.execute(query)
				data = cur.fetchall()
				cur.close()
				db.close()
			except:
				if db:
					db.close()
				continue
			value = [str(item) for sublist in data for item in sublist]
			final_value.extend(value)	
			for num in final_value:
				if num != '':
					total = total+int(num)
			if len(final_value):
				ul_issue = (total/float(len(final_value)))*100
	except:
		ul_issue = None
	

        return ul_issue



def live_query_cam_ul_issue_kpi(host_name,site,war,crit):
    perf = ''
    ul_issue = ''
    state = 3
    plugin_message = ''
    state_string = "unknown"
    try:
	ul_issue =extract_ss_ul_issue_state_from_live(host_name,site)
	if ul_issue != None:
		if ul_issue < war:
                	state = 0
			state_string = "ok"
		elif ul_issue >= crit:
			state = 2
			state_string = "critical"
		else:
			state = 1
			state_string = "warning"
	perf += 'bs_ul_issue' + "=%s;%s;%s " %(ul_issue,war,crit)
   
    except:
        perf = ';%s;%s' % (war,crit)
    plugin_message += "cambium_bs_ul_issue_kpi %s - %s|%s" % (state_string,ul_issue,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))



def  main():
    state_string = "unknown"
    cam_ul=''
    plugin_message =''
    try:
    	host_name = sys.argv[1]
    	site = sys.argv[2]
    	war = sys.argv[3]
    	crit = sys.argv[4]
    except:
	perf =''
    	plugin_message += "cambium_bs_ul_issue_kpi %s - %s|%s" % (state_string,cam_ul,perf)
	sys.exit((3))	
    live_query_cam_ul_issue_kpi(host_name,site,float(war),float(crit))


if __name__ == '__main__':
        main()
                 
