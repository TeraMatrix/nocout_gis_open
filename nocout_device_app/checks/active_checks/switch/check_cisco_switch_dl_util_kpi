#!/usr/bin/python
import time
import sys
import os
import socket
import memcache
import imp
"""
Poller script which runs on ss and calculates the ul utilization of the ss connected from BS.

Poller script determines the uplink utilization of the ss.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
uplink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_switch_pmp1_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################



def extract_switch_dl_util_from_live(hostname,site,memc):
	try:
		key1 = str(hostname)+"switch_dl_utilization"
		dict2 = memc.get(key1)
		mro_dl_dict=dict(dict2)
	except Exception ,e:
		mro_dl_dict = {}
	#print mro_dl_dict
        return mro_dl_dict


def live_query_switch_dl_util_kpi(hostname,site,war,crit,qos,memc):
    state = 3
    kpi_list_index = []
    dl_kpi = ''
    perf = ''
    plugin_message = ''
    state_string = "unknown"
    crit_flag = 0
    warn_flag = 0
    normal_flag = 0
    qos_value = qos.split('|')[:-1]
    dict1_kpi = []
    #for each in qos_value:
    #    if int(each):
    #        print int(each)
    #        kpi_list_index.append(qos_value.index(each))
    #        print kpi_list_index
    kpi_list_index = [i+1 for i,x in enumerate(qos_value) if int(x) >0]
    try:
	dl_util_dict= extract_switch_dl_util_from_live(hostname,site,memc)
	for entry in dl_util_dict.keys():
		each, index = entry.split("_")	
		index = int(index)
		if each == "gi0":
			index = index+24
		if index in kpi_list_index:
			dl_kpi =  dl_util_dict[entry]
			try:
				dl_kpi = (float(dl_kpi)/float(qos_value[index-1])) *100
				entry = entry+"_kpi"
				tup1 = (entry,dl_kpi, index )
				dict1_kpi.append(tup1)
				#max_tuple = max(dict1_kpi, key = lambda x:x[1])
				#print "max ", max_tuple
			except Exception,e:
				continue
	max_tuple = max(dict1_kpi, key = lambda x:x[1])
	dl_kpi = max_tuple[1]
	dl_kpi = round(dl_kpi,2)
	if dl_kpi or dl_kpi ==0:
		perf += str(max_tuple[0]) + "=%s;%s;%s;%s " % (dl_kpi,war,crit,qos_value[max_tuple[2]-1])
		if dl_kpi >= crit:
			crit_flag = 1
		elif dl_kpi >= war and dl_kpi < crit:
			warn_flag = 1
		else:
			normal_flag = 1
	if crit_flag:
		state =2
		state_string = "critical"
	elif warn_flag:
		state =1
		state_string = "warning"
	elif normal_flag:
		state = 0
		state_string = "ok"
		
    except Exception ,e:
        print e
	perf = '' 
    plugin_message += "switch_dl_util_kpi %s - %s|%s" % (state_string,dl_kpi,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))
		
def  main():

    state_string = "unknown"
    dl_util=''
    plugin_message = ''
    try:
        host_name = sys.argv[1]
        site = sys.argv[2]
        war = sys.argv[3]
        crit = sys.argv[4]
	qos = sys.argv[5]
    except:
        perf =';;;%s ' % qos
        plugin_message += "switch_dl_util_kpi %s - %s|%s" % (state_string,dl_util,perf)
        sys.exit((3))
    memc_module = imp.load_source('dbs', '/omd/sites/%s/lib/python/mysql_connection.py' % site )
    memc =memc_module.memc
    live_query_switch_dl_util_kpi(host_name,site,float(war),float(crit),qos,memc)
	

if __name__ == '__main__':
	#mysite = sys.argv[2]
	#memc_module = imp.load_source('dbs', '/omd/sites/%s/lib/python/mysql_connection.py' % mysite )
	#memc =memc_module.memc
	main() 
