#!/usr/bin/python2
# -*- coding: utf-8 -*-
#~ Author: Silvio Knizek
#~ License: GPLv2
#~ Version: 1.0

import sys
from telnetlib import Telnet
import socket
import json

import mysql.connector

def mysql_conn():
        db = mysql.connector.connect(
                        user='root',
                        host='10.133.12.163',
                        password='root',
                        database='nocout_24_09_14',
                        port=3200)

        return db

def extract_host_from_wimax_topology(ss_host_mac):
        query = """
        select device_name from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
        db = mysql_conn()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()

        return data




def connection_telnet(host_name, port,matched_string):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.

        """
        try:
                tn = Telnet(host_name,port,timeout=3)
        except socket.timeout:
                exit_value = 3
                ss_vlan_state = "UNKNOWN"
                sys.stdout.write("UNKNOWN Output")
                sys.exit((exit_value))
        tn.read_until("Login:")
        tn.write("admin" + "\r\n")
        tn.read_until("Password:")
        tn.write("admin" + "\r\n")
        tn.write("show running-config\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()
	ss_frequency = ''

        try:
                for i,row in enumerate(data.split("\n")):
                        if matched_string in row:
                                ss_frequency = int([r for r in row.split()][-1])
                                break
        except:
                ss_frequency = ''

	return ss_frequency


def get_from_socket(socket_ip,socket_port, query):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise 
         Exception: SyntaxError,socket error 
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((socket_ip,socket_port))
    s.send(query)
    s.shutdown(socket.SHUT_WR)
    output = s.recv(100000000)
    output.strip("\n")
    return output


def live_query_frequency(host_name, socket_ip,socket_port,mac):
	"""
    	Connects to a socket, checks for the WELCOME-MSG and closes the
    	connection.
    	Returns nothing.
    
    	"""
	exit_value = 3
	plugin_message = ''
	frequency_state = "UNKNOWN"
	sector_id = ''
	perf = ''
	ss_frequency = ''
	
	host_name = extract_host_from_wimax_topology(mac)
	try:
		if host_name[0][0]:
			query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                        	"service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("wimax_topology",host_name[0][0])
        		query_output = json.loads(get_from_socket(socket_ip,socket_port,query_string).strip())
			if query_output[0][0]:
				plugin_output = str(query_output[0][0].split('OK-')[1])
				plugin_output = [entry for entry in plugin_output.split(' ')]
				entry=filter(lambda x: mac in x, plugin_output)
				sector_id = entry[0].split('=')[1].split(',')[8]
				if int(sector_id) == 1:
					ss_frequency = connection_telnet(host_name,23,"wimax 1/1 frequency")
					frequency_state = "OK"
					exit_value = 0	
				elif int(sector_id)  == 2:
					ss_frequency = connection_telnet(host_name,23,"wimax 1/2 frequency")
					frequency_state = "OK"
					exit_value = 0	
	except:
		frequency_state = "UNKNOWN1"

	plugin_message += "wimax_ss_frequency_invent %s - %s" % (frequency_state,ss_frequency) 
	sys.stdout.write(plugin_message)  
	sys.exit((exit_value))

def main():
    exit_value =3
    try:
	socket_ip = sys.argv[1]
	socket_port = sys.argv[2]
	mac = sys.argv[3]
        live_query_frequency(socket_ip,int(socket_port),mac)
    except socket.error, message:
        sys.stdout.write("Could not open socket: " + message) 
        sys.exit((exit_value))


if __name__ == '__main__':
    main()
