#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os

import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_qos_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################



def extract_bs_ip_from_wimax_topology(ss_host_mac):
        query = """
        select ip_address from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
        db = mysql_conn()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()

        return data


def connection_telnet(host_name, port,mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        try:
                tn = Telnet(host_name,port,timeout=3)
        except socket.timeout:
		qos = None
        tn.read_until("Login:")
        tn.write("admin" + "\r\n")
        tn.read_until("Password:")
        tn.write("admin" + "\r\n")
        tn.write("show service-flows\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()

	qos = None
	svc_cls_index_list = []
        try:
                for i,row in enumerate(data.split("\n")):
                        if mac in row:
                                params_list = [r for r in row.split()]
                                svc_cls_index = int(params_list[4])
				svc_cls_index_list.append(svc_cls_index)
				if len(svc_cls_index_list) == 2:
					break
        except:
		qos = None
	return qos

def check_wimax_qos_invent(item, _no_params, info):
    """
            check_wimax_qos_invent function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    try:
	if info[0][2]:
                ss_mac = info[0][2]
		a=binascii.b2a_hex(ss_mac)
		n = 2
		ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
                if ss_mac:
			host_ip = extract_bs_ip_from_wimax_topology(ss_mac)
			if host_ip[0][0]:
                		qos =connection_telnet(host_ip[0][0], 23,ss_mac)
				if isinstance(qos,int):
        				infotext = "%s" % qos
					state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext)


check_info["wimax_qos_invent"] = {
    'check_function': check_wimax_qos_invent,
    'service_description': 'wimax_qos_invent',
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_qos_invent"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
