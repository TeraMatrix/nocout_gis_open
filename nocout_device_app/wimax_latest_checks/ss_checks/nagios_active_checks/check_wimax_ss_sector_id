#!/usr/bin/python2
# -*- coding: utf-8 -*-
#~ Author: Silvio Knizek
#~ License: GPLv2
#~ Version: 1.0

import sys
from telnetlib import Telnet
import socket
import json



def get_from_socket(socket_ip,socket_port, query):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise 
         Exception: SyntaxError,socket error 
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((socket_ip,socket_port))
    s.send(query)
    s.shutdown(socket.SHUT_WR)
    output = s.recv(100000000)
    output.strip("\n")
    return output


def live_query_sector_id(host_name, socket_ip,socket_port,mac):
	"""
    	Connects to a socket, checks for the WELCOME-MSG and closes the
    	connection.
    	Returns nothing.
    
    	"""
	exit_value = 3
	plugin_message = ''
	sector_id_state = "UNKNOWN"
	sector_id = ''
	perf = ''
	try:
		query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                        "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("bs_show_ss",host_name)
        	query_output = json.loads(get_from_socket(socket_ip,socket_port,query_string).strip())
		if query_output[0][0]:
			plugin_output = str(query_output[0][0].split('OK-')[1])
			plugin_output = [entry for entry in plugin_output.split(' ')]
			entry=filter(lambda x: mac in x, plugin_output)
			sector_id = entry[0].split('=')[1].split(',')[8]
			if sector_id:
				perf += 'ss_sector_id' + "=%s" %(sector_id) 
				sector_id_state = "OK"
				exit_value = 0	
	except:
		sector_id_state = "UNKNOWN1"

	plugin_message += "wimax_sector_id %s - %s |%s" % (sector_id_state,sector_id,perf) 
	sys.stdout.write(plugin_message)  
	sys.exit((exit_value))

def main():
    exit_value =3
    try:
	host_name = sys.argv[1]
	socket_ip = sys.argv[2]
	socket_port = sys.argv[3]
	mac = sys.argv[4]
        live_query_sector_id(host_name,socket_ip,int(socket_port),mac)
    except socket.error, message:
        sys.stdout.write("Could not open socket: " + message) 
        sys.exit((exit_value))


if __name__ == '__main__':
    main()
