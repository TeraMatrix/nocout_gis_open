#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import re
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_topology
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################



def connection_telnet_bs_for_topology(hostname, port):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        try:
                tn = Telnet(hostname,port,timeout=3)
        except socket.timeout:
		plugin_message = ""
		return plugin_message	
        tn.read_until("Login:")
        tn.write("admin" + "\r\n")
        tn.read_until("Password:")
        tn.write("admin" + "\r\n")
        tn.write("show ss\r\n")
        tn.write("show connectivity-table ss\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()

        plugin_message= ""


	try:
        	row_list=  [row for row in data.split("\n")]
        	strToFind = re.compile(r'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', re.I)
        	pat = re.compile(r'(\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3})',re.I)

        	only_mac_matches = filter(lambda x: re.search(strToFind,x),row_list)
		ip_matches = filter(lambda x: re.search(pat,x),only_mac_matches)

        	final_mac_matches = list(set(only_mac_matches)-set(ip_matches))
        	for i,row in enumerate(final_mac_matches):
                	params =[ r for r in row.split()]
                	ss_mac =params[2]
                	ss_ip = filter(lambda x: ss_mac in x, ip_matches)
                	ss_ip = ss_ip[0].split()[3]
                	sector_id = int(params[1])
                	dl_rssi = int(params[8])

                	ul_rssi = int(params[13])
                	dl_cinr = int(params[9])
               	 	ul_cinr = int(params[14])
               	 	dl_intrf = params[10]
                	ul_intrf = params[15]
                	dl_fec = params[7]
                	ul_fec =params[12]
                	exit_value = 0
                	plugin_message += "%s=%s,%s,%s,%s,%s,%s,%s,%s,%s,%s " %(ss_mac,dl_rssi,ul_rssi,dl_cinr,ul_cinr,dl_intrf,
                                                        ul_intrf,dl_fec,ul_fec,sector_id,ss_ip)

	except:
		plugin_messgage = ""
	return plugin_message
		

                                

def check_wimax_topology(item, _no_params, info):
    """
            check_wimax_topology function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    try:
	if info[0][0]:
                bs_ip = info[0][0]
                if bs_ip:
                	plugin_message =connection_telnet_bs_for_topology(bs_ip, 23)
			if plugin_message:
				infotext = "%s" % (plugin_message)
				state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext)


check_info["wimax_topology"] = {
    'check_function': check_wimax_topology,
    'service_description': 'wimax_topology',
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_topology"] = ( ".1.3.6.1.4.1.5812.2000.4.1.1", ["1.0"] )
