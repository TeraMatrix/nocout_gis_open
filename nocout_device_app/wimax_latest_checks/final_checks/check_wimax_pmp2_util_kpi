#!/usr/bin/python
import time
import sys
import os
import socket
"""
Poller script which runs on ss and calculates the ul utilization of the ss connected from BS.

Poller script determines the uplink utilization of the ss.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
uplink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_wimax_pmp2_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################




def extract_pmp2_bw_from_live(hostname,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        pmp_bw = None
        query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                        "service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("wimax_pmp_bw_invent",hostname)

	try:
        	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		socket_path = "/omd/sites/%s/tmp/run/live" % site

        	s.connect(("10.133.19.165",6562))
		s.send(query_string)
       		s.shutdown(socket.SHUT_WR)
        	query_output = s.recv(100000000)
        	query_output.strip("\n")
		query_output = eval(query_output)
        	if query_output:
			query_output = query_output[0][0] 
			output = [entry for entry in query_output.split('- ')[1].split()]
                	pmp_bw=output[1].split('=')[1]
	except Exception,e:
		pmp_bw=None

        return pmp_bw

def extract_pmp2_util_from_live(hostname,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        pmp2_ul = None
	pmp2_dl = None
	query = "GET services\nColumns: service_perf_data\n" + \
		"Filter: service_description = wimax_pmp2_ul_util_bgp\n" + \
		"Filter: service_description = wimax_pmp2_dl_util_bgp\n" + \
		"Or: 2\n" + \
		"Filter: host_name = %s\nOutputFormat: python\n" % (hostname)
	try:
        	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		socket_path = "/omd/sites/%s/tmp/run/live" % site
        	s.connect(("10.133.19.165",6562))
		s.send(query)
       		s.shutdown(socket.SHUT_WR)
        	query_output = s.recv(100000000)
        	query_output.strip("\n")
		query_output = eval(query_output)
        	if query_output[0][0] or query_output[1][0]:
			try:
				pmp2_ul = query_output[0][0].split('=')[1].split(';',1)[0]
			except:
				pmp2_ul = None
			try:
				pmp2_dl = query_output[1][0].split('=')[1].split(';',1)[0]
			except:
				pmp2_dl = None
	except Exception ,e:
		pmp2_dl=None
		pmp2_ul = None

        return pmp2_dl,pmp2_ul


def live_query_pmp2_util_kpi(hostname):
    state = 3
    status_list = [] 
    pmp2_dl_kpi = ''
    pmp2_ul_kpi= ''
    perf = ''
    plugin_message = ''
    state_string = "UNKNOWN"
    try:
	#p = os.path.dirname(os.path.abspath(__file__))
	#print p
	#paths = [path for path in p.split('/')]
	#site = paths[paths.index('sites') + 1]
	site = "ospf2_slave_1"
	pmp2_bw = extract_pmp2_bw_from_live(hostname,site)
	pmp2_dl,pmp2_ul = extract_pmp2_util_from_live(hostname,site)
	pmp2_dl = eval(pmp2_dl)
	pmp2_ul = eval(pmp2_ul)
	pmp2_bw = eval(pmp2_bw)
	if pmp2_bw and pmp2_dl:
		if pmp2_bw <= 3:
			pmp2_dl_kpi = (pmp2_dl/4) *100
			state = 0
			state_string = "OK"
		elif pmp2_bw  > 3:
			pmp2_dl_kpi = (pmp2_dl/8) *100
			state = 0
			state_string = "OK"
		else:
			pmp2_dl_kpi = ''
	if pmp2_bw and pmp2_ul:
                if pmp2_bw <= 3:
                	pmp2_ul_kpi = (pmp2_ul/2) *100
			state = 0
			state_string = "OK"
                elif pmp2_bw > 3:
                        pmp2_ul_kpi = (pmp2_ul/4) *100
			state = 0
			state_string = "OK"
		else:
			pmp2_ul_kpi = ''
	perf += 'pmp2_ul_util_kpi' + "=%s " % (pmp2_ul_kpi)
	perf += 'pmp2_dl_util_kpi' + "=%s " % (pmp2_dl_kpi)
    except Exception ,e:
	perf = '' 
    plugin_message += "wimax_pmp2_util_kpi %s - %s %s|%s" % (state_string,pmp2_ul_kpi,pmp2_dl_kpi,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))
		
def  main():
    host_name = sys.argv[1]
    live_query_pmp2_util_kpi(host_name)
	

if __name__ == '__main__':
	main() 
