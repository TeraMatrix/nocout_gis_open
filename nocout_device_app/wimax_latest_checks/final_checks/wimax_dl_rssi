#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector

try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp


"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_dl_rssi
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def mysql_conn():
        db = None
        try:
            db = mysql.connector.connect(
                        user=_DATABASES['user'],
                        host=_DATABASES['host'],
                        password=_DATABASES['password'],
                        database=_DATABASES['database'],
                        port=_DATABASES['port']
                        )
        except Exception as exp:
            print exp
        return db



def extract_host_from_wimax_topology(ss_host_mac):
        query = """
        select device_name ,site_name from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
        db = mysql_conn()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()

        return data

def get_from_socket(socket_ip,socket_port, query):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise 
         Exception: SyntaxError,socket error 
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((socket_ip,socket_port))
    s.send(query)
    s.shutdown(socket.SHUT_WR)
    output = s.recv(100000000)
    output.strip("\n")
    return output


def live_query_dl_rssi(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        exit_value = 3
        host_name = extract_host_from_wimax_topology(mac)
        dl_rssi = None
        try:
                if host_name[0][0]:
                        query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("wimax_topology",host_name[0][0])
			

			site = host_name[0][1]
                        machine_name = host_name[0][1].split('_')[0]
                        socket_ip = _LIVESTATUS[machine_name]['host']
                        socket_port = _LIVESTATUS[machine_name][site]['port']

                        query_output = json.loads(get_from_socket(socket_ip,socket_port,query_string).strip())
                        if query_output[0][0]:
                                plugin_output = str(query_output[0][0].split('OK -')[1])
                                plugin_output = [entry for entry in plugin_output.split(' ')]
                                entry=filter(lambda x: mac in x.lower(), plugin_output)
                                dl_rssi = int(entry[0].split('=')[1].split(',')[0])

	except:
                dl_rssi= None
        return dl_rssi



def check_wimax_dl_rssi(item, params, info):
    """
            check_wimax_dl_rssi function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    warn,crit = params
    dl_rssi = None
    try:
	if info[1]:
                ss_mac = info[1][0]
		a=binascii.b2a_hex(ss_mac)
		n = 2
		ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
                if ss_mac:
                        dl_rssi = live_query_dl_rssi(ss_mac )
			if dl_rssi:
                                if dl_rssi < crit:
                                        state  = 2
                                elif dl_rssi >= crit and dl_rssi <= warn:
                                        state = 1
                                else:
                                        state = 0
        			infotext = "Device downlink signal strength indication is %s " % dl_rssi
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value1"

    return (state, infotext, [("dl_rssi", dl_rssi, warn, crit)])


check_info["wimax_dl_rssi"] = {
    'check_function': check_wimax_dl_rssi,
    'service_description': 'wimax_dl_rssi',
    'has_perfdata': True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_dl_rssi"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
