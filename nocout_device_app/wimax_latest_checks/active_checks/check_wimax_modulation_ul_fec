#!/usr/bin/python2
# -*- coding: utf-8 -*-
#~ Author: Silvio Knizek
#~ License: GPLv2
#~ Version: 1.0

import sys
from telnetlib import Telnet
import socket
import json

import mysql.connector



try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp



def mysql_conn():
        db = None
        try:
            db = mysql.connector.connect(
                        user=_DATABASES['user'],
                        host=_DATABASES['host'],
                        password=_DATABASES['password'],
                        database=_DATABASES['database'],
                        port=_DATABASES['port']
                        )
        except Exception as exp:
            print exp
        return db

def get_from_socket(ip=None,port=None ,query=None,site=None):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise
         Exception: SyntaxError,socket error
    """
    if site:
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	path = "/omd/sites/%s/tmp/run/live" % (site)
        s.connect(path)
    else:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip,port))

    s.send(query)
    s.shutdown(socket.SHUT_WR)
    output = s.recv(100000000)
    output.strip("\n")
    return output




def extract_host_from_wimax_topology(ss_host_mac):
        query = """
        select device_name,site_name from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
        db = mysql_conn()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()

        return data



def live_query_modulation_ul_fec(ss_host,site,war,crit):
	"""
    	Connects to a socket, checks for the WELCOME-MSG and closes the
    	connection.
    	Returns nothing.
    
    	"""
	exit_value = 3
	plugin_message = ''
	modulation_ul_fec_state = "unknown"
	modulation_ul_fec = ''
	perf = ''
	ul_fec_normal = ["qam1612", "qam1634", "qam6423","qam6434"]
	mac = None
        host = None
        mac_query = "GET services\nColumns: service_perf_data\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("wimax_ss_mac",ss_host)
        mac_output = eval(get_from_socket(query=mac_query,site=site).strip())
        try:
                if mac_output[0][0]:
                        mac = mac_output[0][0].split('=')[1].split(';',1)[0]
                if mac:
                        host_name = extract_host_from_wimax_topology(mac)
                        host = host_name[0][0]
        except:
                        host = None

	try:
		if host:
			query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                        	"service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("wimax_topology",host_name[0][0])
			site = host_name[0][1]
                        machine_name = host_name[0][1].split('_')[0]
                        socket_ip = _LIVESTATUS[machine_name]['host']
                        socket_port = _LIVESTATUS[machine_name][site]['port']

        		query_output = eval(get_from_socket(ip=socket_ip,port=socket_port,query=query_string).strip())
			if query_output[0][0]:
				plugin_output = str(query_output[0][0].split('OK -')[1])
				plugin_output = [entry for entry in plugin_output.split(' ')]
				entry=filter(lambda x: mac in x, plugin_output)
				modulation_ul_fec = entry[0].split('=')[1].split(',')[7]
				if modulation_ul_fec:
					perf += 'modulation_ul_fec' + "=%s" %(modulation_ul_fec)
					mod_ul_fec = "".join(e for e in modulation_ul_fec if e.isalnum())
					if modu_ul_fec in crit:
						modulation_ul_fec_state = "critical"
                                        	exit_value = 2
                               	 	elif mod_ul_fec in war:
						modulation_ul_fec_state = "war"
                                        	exit_value=1
                                	elif mod_ul_fec in ul_fec_normal:
						modulation_ul_fec_state = "ok"
                                        	exit_value = 0
 
	except:
		modulation_ul_fec_state = "unknown"

	plugin_message += "wimax_modulation_ul_fec %s - %s |%s" % (modulation_ul_fec_state,modulation_ul_fec,perf) 
	sys.stdout.write(plugin_message)  
	sys.exit((exit_value))

def main():
    exit_value =3
    try:
	ss_host = sys.argv[1]
	site = sys.argv[2]
	war = sys.argv[3]
	crit = sys.argv[4]
        live_query_modulation_ul_fec(ss_host,site,war,crit)
    except socket.error, message:
        sys.stdout.write("Could not open socket: " + message) 
        sys.exit((exit_value))


if __name__ == '__main__':
    main()
