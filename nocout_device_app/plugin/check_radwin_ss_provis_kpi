#!/usr/bin/python
import time
import sys
import os
import socket
import pymongo
from datetime import datetime,timedelta
"""
Poller script which runs on ss and calculates the ul utilization of the ss connected from BS.

Poller script determines the uplink utilization of the ss.
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
uplink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_radwin_pmp1_dl_utilization_kpi
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################



try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp



def extract_radwin_ss_state(hostname,site):
    state = 3
    ss_state = ''
    perf = ''
    plugin_message = ''
    DB = None
    state_string = "unknown"
    rssi = None
    uas  = None
    machine_name = site.split('_')[0]
    mongo_port = _LIVESTATUS[machine_name][site]['mongo_port']
    mongo_host = _LIVESTATUS[machine_name][site]['mongo_host']
    mongo_db = _LIVESTATUS[machine_name][site]['db']
    try:
	CONN = pymongo.Connection(host=mongo_host, port=int(mongo_port))
	db = CONN[mongo_db]
    except pymongo.errors.PyMongoError, e:
	perf = '' 
    	plugin_message += "radwin_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
    	sys.stdout.write(plugin_message)
    	sys.exit((state))

    end_time = datetime.now()
    start_time = end_time - timedelta(minutes=6)
    cur = db.device_service_status.find({"local_timestamp" : { "$gt": start_time, "$lt": end_time},"host":hostname,
	"$or":[{"service":'radwin_rssi'},{"service":"radwin_uas"}]})
    
    try:
        for doc in cur:
		if doc.get('service') == 'radwin_rssi':
			rssi=doc.get('data')[0].get('value')
		if doc.get('service') == 'radwin_uas':
			uas=doc.get('data')[0].get('value')
		
    	if rssi and int(rssi) < -80:
		ss_state = "los"
    		state = 0
		state_string= "ok"
    	elif uas and int(uas) != 900 and int(uas) > 20:
		ss_state = "uas"
    		state = 0
		state_string= "ok"
    	else:
		ss_state = "normal" 
		state_string= "ok"
    		state = 0

    	perf += 'ss_state' + "=%s " % (ss_state)
    except Exception ,e:
	perf = '' 
    plugin_message += "radwin_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
    sys.stdout.write(plugin_message)
    sys.exit((state))
		
def  main():

    state_string = "unknown"
    ss_state=''
    try:
        host_name = sys.argv[1]
        site = sys.argv[2]
    except:
        perf =''
        plugin_message += "radwin_ss_provis_kpi %s - %s|%s" % (state_string,ss_state,perf)
        sys.exit((3))

    extract_radwin_ss_state(host_name,site)
	

if __name__ == '__main__':
	main() 
