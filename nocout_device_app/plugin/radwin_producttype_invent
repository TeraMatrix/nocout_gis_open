#!/usr/bin/python
"""
Radwin product type Poller script.

Poller script determines the radwin product type.
poller script takes the snmp value of OID .1.3.6.1.4.1.4458.1000.1.1.30 from snmp agent of device at specific interval.
Radwin product type is sent to device application 

"""
# #####################################################################
# Function: check_radwin_producttype_invent
#
# Parameters : info(SNMP Output) _no_params(NO parameters)
#
# Output:  service state ,plugin output
#####################################################################

import logging

import os

try:
    log_file = "nocout/log_plugins.log"
    with open(log_file, 'a+') as f:
        pass
    logging.basicConfig(filename=log_file, level=logging.CRITICAL)
except:
    pass


def check_radwin_producttype_invent(item, _no_params, info):
    """
                check_radwin_producttype_invent function calculates the producttype of the device

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : RW-2450-0150
                        Raises:
                                Exception
    """
    state = 3
    infotext = "unknown output"
    try:
        logging.debug("radwin_producttype_invent SNMP output %s", info)
        if info[0][0]:
            product_type = info[0][0]
            state = 0
            infotext = "%s" % product_type
        else:
            state = 0
            infotext = "unknown value"
    except:
        infotext = "unknown value"
        logging.critical("radwin_producttype_invent %s", infotext, exc_info=True)
    return (state, infotext)


check_info["radwin_producttype_invent"] = {
    'check_function': check_radwin_producttype_invent,
    'service_description': 'radwin_producttype_invent',
}

#######################################################################
#	SNMP OID
#######################################################################
snmp_info["radwin_producttype_invent"] = ( ".1.3.6.1.4.1.4458.1000.1", ["1.30"] )

