#!/usr/bin/python

"""
operating Frequency of device  Poller script.

This is part of device application. 
Poller script determines the operating frequency of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.4458.1000.1.5.16 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_radwin_frequency_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
#######################################################################

import logging

import os

try:
    log_file = "nocout/log_plugins.log"
    with open(log_file, 'a+') as f:
        pass
    logging.basicConfig(filename=log_file, level=logging.CRITICAL)
except:
    pass

def check_radwin_frequency_invent(item, _no_params, info):
    """
            check_radwin_frequency_invent function calculates the operating frequency

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_output"
    try:
        logging.debug("radwin_frequency_invent SNMP Output %s", info)
        if info[0][0]:
            frequency = int(info[0][0])
            if frequency < 0:
                state = 0
                infotext = "invalid_value_%d" % frequency
            else:
                state = 0
                infotext = "%d" % frequency
    except ValueError:
        infotext = "type_mismatch_value"
        logging.critical("radwin_frequency_invent %s", infotext, exc_info=True)
    except:
        infotext = "unknown_value"
        logging.critical("radwin_frequency_invent %s", infotext, exc_info=True)
    return (state, infotext)


check_info["radwin_frequency_invent"] = {
    'check_function': check_radwin_frequency_invent,
    'service_description': 'radwin_frequency_invent',
}

#########################################################################
#	SNMP OID for the operating frequency
#########################################################################
snmp_info["radwin_frequency_invent"] = ( ".1.3.6.1.4.1.4458.1000.1", ["5.16"] )
