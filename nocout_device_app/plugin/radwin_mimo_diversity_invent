#!/usr/bin/python


"""
transmission type Poller script.

Poller script determines the tranmission type whether it is mimo or diversity.
poller script takes the snmp value of OID .1.3.6.1.4.1.4458.1000.1.5.58.0 from snmp agent of device at specific interval.
Trasmission type information is sent to device application 

"""
# ###########################################################################
# Function : check_radwin_mimo_diversity_invent
#
# Parameters: info (SNMP output) , _no_params ( No parameters) ,item(item on which filter)
#
# Output:   service state ,plugin output
###########################################################################

import logging

import os

try:
    log_file = "nocout/log_plugins.log"
    with open(log_file, 'a+') as f:
        pass
    logging.basicConfig(filename=log_file, level=logging.CRITICAL)
except:
    pass


def check_radwin_mimo_diversity_invent(item, _no_params, info):
    """
                check_radwin_mimo_diversity_invent function calculates the trasnmission type whether it is mimo or diversity.

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : Mimo
                        Raises:
                                ValueError ,Exception
    """

    state = 3
    infotext = "unknown output"
    try:
        logging.debug("radwin_mimo_diversity_invent SNMP Output %s", info)
        transmission_type = int(info[0][0])
        if transmission_type == 1:
            type_trans = "Mimo"
            state = 0
        elif transmission_type == 2:
            type_trans = "Diversity"
            state = 0
        else:
            type_trans = "unknown value"
            state = 0
        infotext = "%s" % type_trans
    except ValueError:
        infotext = "type mismatch value"
        logging.critical("radwin_mimo_diversity_invent %s", infotext, exc_info=True)
    except:
        infotext = "unknown value"
        logging.critical("radwin_mimo_diversity_invent %s", infotext, exc_info=True)
    return (state, infotext)


check_info["radwin_mimo_diversity_invent"] = {
    'check_function': check_radwin_mimo_diversity_invent,
    'service_description': 'radwin_mimo_diversity_invent',
}
################################################################################
#	SNMP OID
#################################################################################
snmp_info["radwin_mimo_diversity_invent"] = ( ".1.3.6.1.4.1.4458.1000.1.5", ["58.0"] )


