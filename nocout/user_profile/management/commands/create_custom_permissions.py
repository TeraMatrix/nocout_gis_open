"""
=======================================================================================================
Module contains custom command 'create_custom_permissions' for creating custom permissions in database.
=======================================================================================================

Location:
* /nocout_gis/nocout/user_profile/management/commands/create_custom_permissions.py

Usage:
* ./manage.py create_custom_permissions

List of constructs:
=======
Classes
=======
* Command
"""

import logging
from django.core.management.base import BaseCommand
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import Permission
from user_profile.permissions import custom_perms

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    """
    Create user defined or custom permissions which are not auto-generated by django.

    Workflow:
    1. Get list of custom permissions (custom_perms) from permissions.py and
       call 'create_permissions()' with custom_perms as parameter.
    2. Check whether 'default_ct' (default content type which is not associated
       with any app or model) exist or not. If not exist then create it.
    3. Loop on all perms in 'custom_perms' list.
    4. Fetch 'content_type' from dict in current loop, if it doesn't exist
       then consider 'default_ct' content type as default one.
    5. Fetch 'name', 'content_type', 'codename' from current dict, then create
       permission if not exist in 'auth_permission' table.

    Perms File: /nocout_gis/nocout/user_profile/permissions.py
    """
    args = 'No arguments needed.'
    help = 'Create user defined or custom permissions in database.'

    def handle(self, *args, **options):
        def create_permissions(perms):
            """
            Create permission if it is not present in 'auth_permission' table.
            """
            for perm in perms:
                # Get name.
                name = perm['name']

                # Get codename.
                codename = perm['codename']

                # Get content type.
                content_type = perm['content_type'] if 'content_type' in perm else ""

                # Content Type.
                ct = None
                if content_type:
                    if {'app_label', 'model'} <= set(content_type):
                        try:
                            ct = ContentType.objects.get(app_label=content_type['app_label'],
                                                         model=content_type['model'])
                        except Exception as e:
                            logger.info("ContentType not exist. Exception: {}".format(e.message))

                # Create permission if it is not present in database.
                if ct:
                    Permission.objects.get_or_create(name=name,
                                                     content_type=ct,
                                                     codename=codename)

        # Create custom permissions.
        create_permissions(custom_perms)